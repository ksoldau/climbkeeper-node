module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateClimb {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Climb {
  id: ID!
  createdAt: DateTime!
  grade: String!
  tickType: String!
  postedBy: User
}

type ClimbConnection {
  pageInfo: PageInfo!
  edges: [ClimbEdge]!
  aggregate: AggregateClimb!
}

input ClimbCreateInput {
  id: ID
  grade: String!
  tickType: String!
  postedBy: UserCreateOneWithoutClimbsInput
}

input ClimbCreateManyWithoutPostedByInput {
  create: [ClimbCreateWithoutPostedByInput!]
  connect: [ClimbWhereUniqueInput!]
}

input ClimbCreateWithoutPostedByInput {
  id: ID
  grade: String!
  tickType: String!
}

type ClimbEdge {
  node: Climb!
  cursor: String!
}

enum ClimbOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  grade_ASC
  grade_DESC
  tickType_ASC
  tickType_DESC
}

type ClimbPreviousValues {
  id: ID!
  createdAt: DateTime!
  grade: String!
  tickType: String!
}

input ClimbScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  grade: String
  grade_not: String
  grade_in: [String!]
  grade_not_in: [String!]
  grade_lt: String
  grade_lte: String
  grade_gt: String
  grade_gte: String
  grade_contains: String
  grade_not_contains: String
  grade_starts_with: String
  grade_not_starts_with: String
  grade_ends_with: String
  grade_not_ends_with: String
  tickType: String
  tickType_not: String
  tickType_in: [String!]
  tickType_not_in: [String!]
  tickType_lt: String
  tickType_lte: String
  tickType_gt: String
  tickType_gte: String
  tickType_contains: String
  tickType_not_contains: String
  tickType_starts_with: String
  tickType_not_starts_with: String
  tickType_ends_with: String
  tickType_not_ends_with: String
  AND: [ClimbScalarWhereInput!]
  OR: [ClimbScalarWhereInput!]
  NOT: [ClimbScalarWhereInput!]
}

type ClimbSubscriptionPayload {
  mutation: MutationType!
  node: Climb
  updatedFields: [String!]
  previousValues: ClimbPreviousValues
}

input ClimbSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClimbWhereInput
  AND: [ClimbSubscriptionWhereInput!]
  OR: [ClimbSubscriptionWhereInput!]
  NOT: [ClimbSubscriptionWhereInput!]
}

input ClimbUpdateInput {
  grade: String
  tickType: String
  postedBy: UserUpdateOneWithoutClimbsInput
}

input ClimbUpdateManyDataInput {
  grade: String
  tickType: String
}

input ClimbUpdateManyMutationInput {
  grade: String
  tickType: String
}

input ClimbUpdateManyWithoutPostedByInput {
  create: [ClimbCreateWithoutPostedByInput!]
  delete: [ClimbWhereUniqueInput!]
  connect: [ClimbWhereUniqueInput!]
  set: [ClimbWhereUniqueInput!]
  disconnect: [ClimbWhereUniqueInput!]
  update: [ClimbUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [ClimbUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [ClimbScalarWhereInput!]
  updateMany: [ClimbUpdateManyWithWhereNestedInput!]
}

input ClimbUpdateManyWithWhereNestedInput {
  where: ClimbScalarWhereInput!
  data: ClimbUpdateManyDataInput!
}

input ClimbUpdateWithoutPostedByDataInput {
  grade: String
  tickType: String
}

input ClimbUpdateWithWhereUniqueWithoutPostedByInput {
  where: ClimbWhereUniqueInput!
  data: ClimbUpdateWithoutPostedByDataInput!
}

input ClimbUpsertWithWhereUniqueWithoutPostedByInput {
  where: ClimbWhereUniqueInput!
  update: ClimbUpdateWithoutPostedByDataInput!
  create: ClimbCreateWithoutPostedByInput!
}

input ClimbWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  grade: String
  grade_not: String
  grade_in: [String!]
  grade_not_in: [String!]
  grade_lt: String
  grade_lte: String
  grade_gt: String
  grade_gte: String
  grade_contains: String
  grade_not_contains: String
  grade_starts_with: String
  grade_not_starts_with: String
  grade_ends_with: String
  grade_not_ends_with: String
  tickType: String
  tickType_not: String
  tickType_in: [String!]
  tickType_not_in: [String!]
  tickType_lt: String
  tickType_lte: String
  tickType_gt: String
  tickType_gte: String
  tickType_contains: String
  tickType_not_contains: String
  tickType_starts_with: String
  tickType_not_starts_with: String
  tickType_ends_with: String
  tickType_not_ends_with: String
  postedBy: UserWhereInput
  AND: [ClimbWhereInput!]
  OR: [ClimbWhereInput!]
  NOT: [ClimbWhereInput!]
}

input ClimbWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createClimb(data: ClimbCreateInput!): Climb!
  updateClimb(data: ClimbUpdateInput!, where: ClimbWhereUniqueInput!): Climb
  updateManyClimbs(data: ClimbUpdateManyMutationInput!, where: ClimbWhereInput): BatchPayload!
  upsertClimb(where: ClimbWhereUniqueInput!, create: ClimbCreateInput!, update: ClimbUpdateInput!): Climb!
  deleteClimb(where: ClimbWhereUniqueInput!): Climb
  deleteManyClimbs(where: ClimbWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  climb(where: ClimbWhereUniqueInput!): Climb
  climbs(where: ClimbWhereInput, orderBy: ClimbOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Climb]!
  climbsConnection(where: ClimbWhereInput, orderBy: ClimbOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClimbConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  climb(where: ClimbSubscriptionWhereInput): ClimbSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  climbs(where: ClimbWhereInput, orderBy: ClimbOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Climb!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  climbs: ClimbCreateManyWithoutPostedByInput
}

input UserCreateOneWithoutClimbsInput {
  create: UserCreateWithoutClimbsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutClimbsInput {
  id: ID
  name: String!
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  climbs: ClimbUpdateManyWithoutPostedByInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneWithoutClimbsInput {
  create: UserCreateWithoutClimbsInput
  update: UserUpdateWithoutClimbsDataInput
  upsert: UserUpsertWithoutClimbsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutClimbsDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutClimbsInput {
  update: UserUpdateWithoutClimbsDataInput!
  create: UserCreateWithoutClimbsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  climbs_every: ClimbWhereInput
  climbs_some: ClimbWhereInput
  climbs_none: ClimbWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    